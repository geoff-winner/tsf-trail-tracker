{"version":3,"sources":["App.js","components/table/Table.jsx","reportWebVitals.js","index.js"],"names":["trailData","Table","data","tableRowColor","trail","tableCellColor","className","scope","map","index","trailStatus","trailNumber","trailName","trailDifficulty","trailCondition","lastVisitedDate","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseUrl","analytics","database","ref","child","get","then","snapshot","exists","val","console","log","catch","error","App","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qMAuBIA,E,gFCiBWC,EArCD,SAAAC,GACZ,IAAMC,EAAgB,SAAAC,GACpB,MAAiB,WAAVA,EAAqB,YAAc,IAEtCC,EAAiB,SAAAD,GACrB,MAAiB,SAAVA,EAAmB,oBAAsB,IAElD,OACI,wBAAOE,UAAU,iEAAjB,UACE,gCACA,+BACE,oBAAIC,MAAM,MAAV,qBACA,oBAAIA,MAAM,MAAV,kBACA,oBAAIA,MAAM,MAAV,wBACA,oBAAIA,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,oCAGF,gCACCL,EAAKM,KAAI,SAACJ,EAAOK,GAChB,OACE,qBAAoBH,UAAWH,EAAcC,EAAMM,aAAnD,UACE,6BAAqBN,EAAMO,aAAlBF,EAAQ,GACjB,6BAAqBL,EAAMQ,WAAlBH,EAAQ,GACjB,6BAAqBL,EAAMS,iBAAlBJ,EAAQ,GACjB,oBAAoBH,UAAWD,EAAeD,EAAMM,aAApD,SAAmEN,EAAMM,aAAhED,EAAQ,GACjB,6BAAqBL,EAAMU,gBAAlBL,EAAQ,GACjB,6BAAqBL,EAAMW,iBAAlBN,EAAQ,KANVA,EAAQ,YDN7BO,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,oCACZC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,eACfC,YAAa,2DAIfT,IAASU,YACQV,IAASW,WAIjBC,MAAMC,MAAM,aAAaA,MAAM,QAAQC,MAAMC,MAAK,SAASC,GAC9DA,EAASC,UACXjC,EAAYgC,EAASE,MACrBC,QAAQC,IAAIpC,IAGZmC,QAAQC,IAAI,wBAEbC,OAAM,SAASC,GAChBH,QAAQG,MAAMA,MAGhB,IAqBeC,EArBH,WACV,OACE,sBAAKjC,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,8BAGA,oBAAIA,UAAU,kBAAd,SACE,mBAAGkC,KAAK,uEAAR,uDAIF,oBAAIlC,UAAU,kBAAd,SACE,mBAAGkC,KAAK,mFAAR,mDAIF,cAAC,EAAD,CAAOtC,KAAMF,QEzCJyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.be535d27.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/analytics';\nimport 'firebase/database';\nimport './App.css';\nimport Table from './components/table/Table';\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA5FM3d8bYOauMETs-qE2VG5-FsLCofs08\",\n  authDomain: \"tsf-trail-tracker.firebaseapp.com\",\n  projectId: \"tsf-trail-tracker\",\n  storageBucket: \"tsf-trail-tracker.appspot.com\",\n  messagingSenderId: \"14283872575\",\n  appId: \"1:14283872575:web:5d6bbb0aa4fc1b5aa59b8a\",\n  measurementId: \"G-JYMNYD8LQV\",\n  databaseUrl: \"https://tsf-trail-tracker-default-rtdb.firebaseio.com/\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\nconst database = firebase.database();\n\nlet trailData;\n\ndatabase.ref().child('trailList').child('data').get().then(function(snapshot) {\n  if (snapshot.exists()) {\n    trailData = snapshot.val();\n    console.log(trailData);\n  }\n  else {\n    console.log(\"No data available\");\n  }\n}).catch(function(error) {\n  console.error(error);\n});\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        TSF Trail Status\n      </header>\n      <h3 className=\"app-header-link\">\n        <a href=\"https://www.oregon.gov/odf/recreation/guides/tsf-ohv-mapside-map.pdf\">\n          Tillamook Trail Map (Non-Georeferenced)\n        </a>\n      </h3>\n      <h3 className=\"app-header-link\">\n        <a href=\"https://www.oregon.gov/odf/recreation/guides/tsf-ohv-georeferenced-trail-map.pdf\">\n          Tillamook Trail Map (Georeferenced)\n        </a>\n      </h3>\n      <Table data={trailData}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport './Table.css';\n\nconst Table = data => {\n  const tableRowColor = trail => {\n    return trail === 'Closed' ? 'bg-danger' : '';\n  }\n  const tableCellColor = trail => {\n    return trail === 'Open' ? 'trail-status-good' : '';\n  }\n  return (\n      <table className=\"table table-striped table-dark table-hover table-responsive-xl\">\n        <thead>\n        <tr>\n          <th scope=\"col\">Trail #</th>\n          <th scope=\"col\">Name</th>\n          <th scope=\"col\">Difficulty</th>\n          <th scope=\"col\">Status</th>\n          <th scope=\"col\">Condition</th>\n          <th scope=\"col\">Last Visited Date</th>\n        </tr>\n        </thead>\n        <tbody>\n        {data.map((trail, index) => {\n          return (\n            <tr key={index + 1} className={tableRowColor(trail.trailStatus)}>\n              <th key={index + 2}>{trail.trailNumber}</th>\n              <td key={index + 3}>{trail.trailName}</td>\n              <td key={index + 4}>{trail.trailDifficulty}</td>\n              <td key={index + 5} className={tableCellColor(trail.trailStatus)}>{trail.trailStatus}</td>\n              <td key={index + 6}>{trail.trailCondition}</td>\n              <td key={index + 7}>{trail.lastVisitedDate}</td>\n            </tr>\n          )})\n        }\n        </tbody>\n      </table>\n  );\n}\n\nexport default Table;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}