{"version":3,"sources":["modules/app/actions/types.js","reducers/initialState.js","modules/user/actions/types.js","reducers/rootReducer.js","modules/app/reducers/index.js","modules/user/reducers/index.js","store/configureStore.js","store/index.js","components/table/Table.jsx","modules/app/actions/index.js","modules/user/actions/index.js","components/login/Login.jsx","modules/app/App.js","index.js"],"names":["SET_TRAIL_CONDITIONS","UPDATE_TRAIL_CONDITIONS","initialState","app","trailConditions","user","userIsLoggedIn","SET_USER_LOGGED_IN","SET_USER_LOGGED_OUT","appReducer","combineReducers","state","action","type","types","trailData","slice","updatedTrailData","id","rootReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","Table","dispatch","useDispatch","tableRowColor","trail","tableCellColor","useSelector","useState","value","setValue","status","rowKey","inEditMode","setInEditMode","trailNumber","setTrailNumber","trailName","setTrailName","trailDifficulty","setTrailDifficulty","trailStatus","setTrailStatus","trailCondition","setTrailCondition","lastVisitedDate","setLastVisitedDate","updateTrailValue","index","a","firebase","database","ref","child","update","on","snapshot","val","appActions","className","onChange","e","target","placeholder","scope","filter","toLowerCase","includes","map","event","onClick","editedTrailNumber","editedTrailName","editedTrailDifficulty","editedTrailStatus","editedTrailCondition","editedLastVisitedDate","onEdit","setUserLoggedIn","email","password","auth","signInWithEmailAndPassword","then","userCredential","LoginForm","setEmail","setPassword","loginButtonHidden","hideLoginButton","signIn","preventDefault","actions","signOut","htmlFor","aria-describedby","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseUrl","analytics","App","noData","get","exists","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bec22d73.chunk.js","sourcesContent":["export const SET_TRAIL_CONDITIONS = 'SET_TRAIL_CONDITIONS';\nexport const UPDATE_TRAIL_CONDITIONS = 'UPDATE_TRAIL_CONDITIONS';\n","export const initialState = {\n  app: {\n    trailConditions: [],\n  },\n  user: {\n    userIsLoggedIn: false,\n  },\n};\n\nexport default initialState;\n","export const SET_USER_LOGGED_IN = 'SET_USER_LOGGED_IN';\nexport const SET_USER_LOGGED_OUT = 'SET_USER_LOGGED_OUT';\n","import { combineReducers } from 'redux';\nimport app from '../modules/app/reducers';\nimport user from '../modules/user/reducers';\n\nconst appReducer = combineReducers({ app, user });\n\nconst rootReducer = (state, action) => {\n  return appReducer(state, action);\n};\n\nexport default rootReducer;\n","import * as types from '../actions/types';\nimport { initialState } from '../../../reducers/initialState';\n\nexport default (state = initialState.app, action) => {\n  switch (action.type) {\n    case types.SET_TRAIL_CONDITIONS:\n      return {\n        ...state,\n        trailConditions: [...state.trailConditions, ...action.trailData],\n      };\n    case types.UPDATE_TRAIL_CONDITIONS:\n      return {\n        ...state,\n        trailConditions: [\n          ...state.trailConditions.slice(0, action.updatedTrailData.id),\n          action.updatedTrailData,\n          ...state.trailConditions.slice(action.updatedTrailData.id + 1),\n        ],\n      };\n    default:\n      return state;\n  }\n};\n","import * as types from '../actions/types';\nimport { initialState } from '../../../reducers/initialState';\n\nexport default (state = initialState.user, action) => {\n  switch (action.type) {\n    case types.SET_USER_LOGGED_IN:\n      return {\n        ...state,\n        userIsLoggedIn: action.userIsLoggedIn,\n      };\n    case types.SET_USER_LOGGED_OUT:\n      return {\n        ...state,\n        userIsLoggedIn: action.userIsLoggedIn,\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Thunk middleware allows actions to be chained and waited on by returning\n// a function from that action\n// https://github.com/gaearon/redux-thunk\nimport thunk from 'redux-thunk';\n\n// Reducers\nimport rootReducer from '../reducers/rootReducer';\n\nexport default function configureStore(initialState) {\n  const store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunk)),\n  );\n  return { store };\n}\n","import configureStore from './configureStore';\nimport { initialState } from '../reducers/initialState';\n\nconst { store } = configureStore(initialState);\n\nexport default store;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport * as appActions from '../../modules/app/actions/index';\n\nimport './Table.css';\n\nconst Table = () => {\n  const dispatch = useDispatch();\n  const tableRowColor = (trail) => {\n    return trail === 'Closed' ? 'bg-danger table-cell' : 'table-cell';\n  };\n  const tableCellColor = (trail) => {\n    return trail === 'Open' ? 'trail-status-good table-cell' : 'table-cell';\n  };\n  const userIsLoggedIn = useSelector((state) => state.user.userIsLoggedIn);\n  const trailData = useSelector((state) => state.app.trailConditions);\n  const [value, setValue] = useState('');\n  const [inEditMode, setInEditMode] = useState({\n    status: false,\n    rowKey: null,\n  });\n  const [trailNumber, setTrailNumber] = useState('');\n  const [trailName, setTrailName] = useState('');\n  const [trailDifficulty, setTrailDifficulty] = useState('');\n  const [trailStatus, setTrailStatus] = useState('');\n  const [trailCondition, setTrailCondition] = useState('');\n  const [lastVisitedDate, setLastVisitedDate] = useState('');\n\n  const onEdit = ({\n    id,\n    editedTrailNumber,\n    editedTrailName,\n    editedTrailDifficulty,\n    editedTrailStatus,\n    editedTrailCondition,\n    editedLastVisitedDate,\n  }) => {\n    setInEditMode({\n      status: true,\n      rowKey: id,\n    });\n    setTrailNumber(editedTrailNumber);\n    setTrailName(editedTrailName);\n    setTrailDifficulty(editedTrailDifficulty);\n    setTrailStatus(editedTrailStatus);\n    setTrailCondition(editedTrailCondition);\n    setLastVisitedDate(editedLastVisitedDate);\n  };\n  const updateTrailValue = (index) => {\n    dispatch(\n      appActions.updateTrailConditions(\n        index,\n        trailNumber,\n        trailName,\n        trailDifficulty,\n        trailStatus,\n        trailCondition,\n        lastVisitedDate,\n      ),\n    );\n    setInEditMode({\n      status: false,\n      rowKey: null,\n    });\n  };\n  return (\n    <>\n      <div className=\"table-search\">\n        <input\n          type=\"text\"\n          onChange={(e) => setValue(e.target.value)}\n          value={value}\n          className=\"table-search-input\"\n          placeholder=\"Search by trail name\"\n        />\n      </div>\n      <table className=\"table table-striped table-dark table-hover table-responsive-xl\">\n        <thead>\n          <tr>\n            <th scope=\"col\" className=\"table-cell\">\n              Trail #\n            </th>\n            <th scope=\"col\" className=\"table-cell\">\n              Name\n            </th>\n            <th scope=\"col\" className=\"table-cell\">\n              Difficulty\n            </th>\n            <th scope=\"col\" className=\"table-cell\">\n              Status\n            </th>\n            <th scope=\"col\" className=\"table-cell\">\n              Condition\n            </th>\n            <th scope=\"col\" className=\"table-cell\">\n              Last Visited Date\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {trailData\n            .filter((trail) => {\n              if (!value) return true;\n              return trail.trailName\n                .toLowerCase()\n                .includes(value.toLowerCase());\n            })\n            .map((trail, index) => {\n              return inEditMode.status && inEditMode.rowKey === trail.id ? (\n                <tr key={trail.id}>\n                  <td className=\"table-cell\">\n                    <input\n                      value={trailNumber}\n                      onChange={(event) => {\n                        setTrailNumber(event.target.value);\n                      }}\n                    />\n                  </td>\n                  <td className=\"table-cell\">\n                    <input\n                      value={trailName}\n                      onChange={(event) => {\n                        setTrailName(event.target.value);\n                      }}\n                    />\n                  </td>\n                  <td className=\"table-cell\">\n                    <input\n                      value={trailDifficulty}\n                      onChange={(event) => {\n                        setTrailDifficulty(event.target.value);\n                      }}\n                    />\n                  </td>\n                  <td className=\"table-cell\">\n                    <input\n                      value={trailStatus}\n                      onChange={(event) => {\n                        setTrailStatus(event.target.value);\n                      }}\n                    />\n                  </td>\n                  <td className=\"table-cell\">\n                    <input\n                      value={trailCondition}\n                      onChange={(event) => {\n                        setTrailCondition(event.target.value);\n                      }}\n                    />\n                  </td>\n                  <td className=\"table-cell\">\n                    <input\n                      value={lastVisitedDate}\n                      onChange={(event) => {\n                        setLastVisitedDate(event.target.value);\n                      }}\n                    />\n                  </td>\n                  <td>\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-success\"\n                      onClick={() => updateTrailValue(trail.id)}\n                    >\n                      Save\n                    </button>\n                  </td>\n                </tr>\n              ) : (\n                <tr key={trail.id} className={tableRowColor(trail.trailStatus)}>\n                  <td key={index + 2} className=\"table-cell\">\n                    {trail.trailNumber}\n                  </td>\n                  <td key={index + 3} className=\"table-cell\">\n                    {trail.trailName}\n                  </td>\n                  <td key={index + 4} className=\"table-cell\">\n                    {trail.trailDifficulty}\n                  </td>\n                  <td\n                    key={index + 5}\n                    className={tableCellColor(trail.trailStatus)}\n                  >\n                    {trail.trailStatus}\n                  </td>\n                  <td key={index + 6} className=\"table-cell\">\n                    {trail.trailCondition}\n                  </td>\n                  <td key={index + 7} className=\"table-cell\">\n                    {trail.lastVisitedDate}\n                  </td>\n                  {userIsLoggedIn && (\n                    <td>\n                      <button\n                        type=\"button\"\n                        className=\"btn btn-warning\"\n                        onClick={() =>\n                          onEdit({\n                            id: trail.id,\n                            editedTrailNumber: trail.trailNumber,\n                            editedTrailName: trail.trailName,\n                            editedTrailDifficulty: trail.trailDifficulty,\n                            editedTrailStatus: trail.trailStatus,\n                            editedTrailCondition: trail.trailCondition,\n                            editedLastVisitedDate: trail.lastVisitedDate,\n                          })\n                        }\n                      >\n                        Edit\n                      </button>\n                    </td>\n                  )}\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default Table;\n","import 'firebase/database';\nimport firebase from 'firebase';\nimport * as types from './types';\n\nexport function getTrailConditions() {\n  const noData = {};\n  return async (dispatch) => {\n    try {\n      const trailData = await firebase\n        .database()\n        .ref('trailList')\n        .get()\n        .then((snapshot) => {\n          if (snapshot.exists()) {\n            return snapshot.val();\n          }\n          return dispatch({\n            type: types.SET_TRAIL_CONDITIONS,\n            noData,\n          });\n        });\n      return dispatch({\n        type: types.SET_TRAIL_CONDITIONS,\n        trailData,\n      });\n    } catch (error) {\n      return error;\n    }\n  };\n}\n\nexport function updateTrailConditions(\n  index,\n  trailNumber,\n  trailName,\n  trailDifficulty,\n  trailStatus,\n  trailCondition,\n  lastVisitedDate,\n) {\n  return async (dispatch) => {\n    try {\n      await firebase.database().ref('trailList').child(index).update({\n        trailNumber,\n        trailName,\n        trailDifficulty,\n        trailStatus,\n        trailCondition,\n        lastVisitedDate,\n      });\n      const trailRef = await firebase.database().ref('trailList').child(index);\n      trailRef.on('value', (snapshot) => {\n        const updatedTrailData = snapshot.val();\n        return dispatch({\n          type: types.UPDATE_TRAIL_CONDITIONS,\n          updatedTrailData,\n        });\n      });\n      return null;\n    } catch (error) {\n      return error;\n    }\n  };\n}\n","import firebase from 'firebase';\nimport * as types from './types';\n\nexport function setUserLoggedIn(email, password) {\n  return async (dispatch) => {\n    let userIsLoggedIn = false;\n    try {\n      await firebase\n        .auth()\n        .signInWithEmailAndPassword(email, password)\n        .then((userCredential) => {\n          userIsLoggedIn = userCredential.user.email;\n        });\n      return dispatch({\n        type: types.SET_USER_LOGGED_IN,\n        userIsLoggedIn,\n      });\n    } catch (error) {\n      return dispatch({\n        type: types.SET_USER_LOGGED_IN,\n        userIsLoggedIn,\n      });\n    }\n  };\n}\n\nexport function setUserLoggedOut() {\n  return async (dispatch) => {\n    let userIsLoggedIn = false;\n    try {\n      await firebase\n        .auth()\n        .signOut()\n        .then(() => {\n          userIsLoggedIn = false;\n        });\n      return dispatch({\n        type: types.SET_USER_LOGGED_OUT,\n        userIsLoggedIn,\n      });\n    } catch (error) {\n      return dispatch({\n        type: types.SET_USER_LOGGED_OUT,\n        userIsLoggedIn,\n      });\n    }\n  };\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport * as actions from '../../modules/user/actions/index';\n\nimport './Login.css';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const userIsLoggedIn = useSelector((state) => state.user.userIsLoggedIn);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [loginButtonHidden, hideLoginButton] = useState(false);\n  const signIn = async (event) => {\n    event.preventDefault();\n    dispatch(actions.setUserLoggedIn(email, password));\n  };\n  const signOut = async (event) => {\n    event.preventDefault();\n    dispatch(actions.setUserLoggedOut());\n  };\n  return !userIsLoggedIn ? (\n    <div className=\"login-form-wrapper\">\n      {!loginButtonHidden && (\n        <button\n          type=\"button\"\n          onClick={() => hideLoginButton(true)}\n          className=\"btn btn-primary\"\n        >\n          Login\n        </button>\n      )}\n      {loginButtonHidden && (\n        <div>\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">\n              Email address\n              <input\n                type=\"email\"\n                className=\"form-control\"\n                id=\"InputEmail1\"\n                aria-describedby=\"emailHelp\"\n                placeholder=\"Enter email\"\n                value={email}\n                onChange={(event) => setEmail(event.target.value)}\n              />\n            </label>\n            <small id=\"emailHelp\" className=\"form-text text-muted\">\n              We&#39;ll never share your email with anyone else.\n            </small>\n            <label htmlFor=\"password\">\n              Password\n              <input\n                type=\"password\"\n                className=\"form-control\"\n                id=\"InputPassword1\"\n                placeholder=\"Password\"\n                value={password}\n                onChange={(event) => setPassword(event.target.value)}\n              />\n            </label>\n          </div>\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            onClick={(event) => signIn(event)}\n          >\n            Submit\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => hideLoginButton(false)}\n            className=\"btn btn-primary login-form-cancel\"\n          >\n            Cancel\n          </button>\n        </div>\n      )}\n    </div>\n  ) : (\n    userIsLoggedIn && (\n      <div className=\"login-form-wrapper\">\n        <button\n          type=\"button\"\n          onClick={(event) => signOut(event)}\n          className=\"btn btn-danger login-form-cancel\"\n        >\n          Logout\n        </button>\n      </div>\n    )\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/analytics';\nimport { useDispatch } from 'react-redux';\n\nimport * as appActions from './actions/index';\nimport './App.css';\nimport Table from '../../components/table/Table';\nimport LoginForm from '../../components/login/Login';\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSENGER_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n  databaseUrl: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nconst App = () => {\n  const dispatch = useDispatch();\n  dispatch(appActions.getTrailConditions());\n  return (\n    <div className=\"app\">\n      <LoginForm />\n      <header className=\"app-header\">TSF Trail Tracker</header>\n      <h3 className=\"app-header-link\">\n        <a href=\"https://www.oregon.gov/odf/recreation/guides/tsf-ohv-mapside-map.pdf\">\n          Tillamook Trail Map (Non-Georeferenced)\n        </a>\n      </h3>\n      <h3 className=\"app-header-link\">\n        <a href=\"https://www.oregon.gov/odf/recreation/guides/tsf-ohv-georeferenced-trail-map.pdf\">\n          Tillamook Trail Map (Georeferenced)\n        </a>\n      </h3>\n      <Table />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store/index';\n\nimport './index.css';\nimport App from './modules/app/App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}